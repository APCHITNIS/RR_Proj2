library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
set.seed(1234)
par(mar=c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each=4), sd = 0.2)
y<- rnorm(12, mean=rep(c(1,2,1), each =4), sd = 0.2)
plot(x, y, col = "blue", pch=19, cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
dataframe<-data.frame(x=x, y=y)
dist(dataframe)
hclustering<-hclust(distxy)
distxy<-dist(dataframe)
hclustering<-hclust(distxy)
plot(hclustering)
set.seed(1234)
par(mar=c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each=4), sd = 0.2)
y<- rnorm(12, mean=rep(c(1,2,1), each =4), sd = 0.2)
plot(x, y, col = "blue", pch=19, cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
dataframe<-data.frame(x=x, y=y)
distxy<-dist(dataframe)
hclustering<-hclust(distxy)
plot(hclustering)
install.packages("ggplot2movies")
install.packages("ggplot2")
getwd()
setwd("/home/amit/R/Coursera/RepResearch/RR_Proj2")
("repdata-data-StormData.csv")
str(data)
dim(data)
data <- read.csv("repdata-data-StormData.csv")
head(data)
dim(data)
str(data)
dfPopHealth <- data.frame(EVTYPE = data$EVTYPE, FATALITIES = data$FATALITIES, INJURIES = data$INJURIES)
summary(dfPopHealth)
head(dfPopHealth)
fataInjuriesPerEv <- with(dfPopHealth, tapply(EVTYPE, list(FATALITIES,INJURIES) sum, na.rm = T))
fataInjuriesPerEv <- with(dfPopHealth, tapply(EVTYPE, list(FATALITIES,INJURIES), sum, na.rm = T))
View(dfPopHealth)
str(dfPopHealth)
dataMod <- data
dfPopHealth <- data.frame(EVTYPE = as.character(dataMod$EVTYPE), FATALITIES = dataMod$FATALITIES, INJURIES = dataMod$INJURIES)
str(dfPopHealth)
str(dfPopHealth)
dfPopHealth <- data.frame(EVTYPE = as.character(dataMod$EVTYPE), FATALITIES = dataMod$FATALITIES, INJURIES = dataMod$INJURIES)
a
fataInjuriesPerEv <- with(dfPopHealth, tapply(EVTYPE, list(FATALITIES,INJURIES), sum, na.rm = T))
as.character(dataMod$EVTYPE)
dfPopHealth <- data.frame(EVTYPE = as.character(dataMod$EVTYPE), FATALITIES = dataMod$FATALITIES, INJURIES = dataMod$INJURIES)
str(dfPopHealth)
rm(dfPopHealth)
dfPopHealth <- data.frame(EVTYPE = as.character(dataMod$EVTYPE), FATALITIES = dataMod$FATALITIES, INJURIES = dataMod$INJURIES)
str(dfPopHealth)
v <- as.character(dataMod$EVTYPE)
class(v)
dfPopHealth <- data.frame(EVTYPE = v, FATALITIES = dataMod$FATALITIES, INJURIES = dataMod$INJURIES)
str(dfPopHealth)
View(dfPopHealth)
dfPopHealth <- data.frame(EVTYPE = v, FATALITIES = dataMod$FATALITIES, INJURIES = dataMod$INJURIES)
dfPopHealth <- data.frame(EVTYPE = as.character(dataMod$EVTYPE), FATALITIES = dataMod$FATALITIES, INJURIES = dataMod$INJURIES, stringsAsFactors = FALSE)
str(dfPopHealth)
fataInjuriesPerEv <- with(dfPopHealth, tapply(EVTYPE, list(FATALITIES,INJURIES), sum, na.rm = T))
dfPopHealth <- data.frame(EVTYPE = as.character(dataMod$EVTYPE), FATALITIES = dataMod$FATALITIES, INJURIES = dataMod$INJURIES)
str(dfPopHealth)
fatalitiesperEv<- with(dfPopHealth, tapply(FATALITIES, list(EVTYPE), sum, na.rm = T))
fatalitiesperEv<
quit()
fatalitiesperEv
table(fatalitiesperEv)
fatalitiesperEv<- with(dfPopHealth, tapply(FATALITIES, list(EVTYPE), sum, na.rm = T))
df2=aggregate(EVTYPE~FATALITIES+INJURIES, data=dfPopHealth, sum, na.rm=TRUE)
df2=aggregate(FATALITIES+INJURIES~EVTYPE, data=dfPopHealth, sum, na.rm=TRUE)
head(df2)
View(df2)
df2$EVTYPE[which(df2$`FATALITIES + INJURIES` == max(df2$`FATALITIES + INJURIES`))]
df2=aggregate(FATALITIES,INJURIES~EVTYPE, data=dfPopHealth, sum, na.rm=TRUE)
df2=aggregate(list(FATALITIES,INJURIES)~EVTYPE, data=dfPopHealth, sum, na.rm=TRUE)
names(dataMod)
library(sqldf)
install.packages("sqldf")
sqldf("select EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP
from `dataMod`
group by EVTYPE")
library(sqldf)
sqldf("select EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP
from `dataMod`
group by EVTYPE")
sqldf("select Top 10 EVTYPE, FATALITIES
from `dataMod`
group by EVTYPE order by FATALITIES)
dfdjfdls
dfjdl;
end
quit()
quit();
sqldf("select EVTYPE, FATALITIES from `dataMod` group by EVTYPE order by FATALITIES)
sqldf("select EVTYPE, FATALITIES from `dataMod` group by EVTYPE order by FATALITIES")
sqldf("select EVTYPE, FATALITIES from `dataMod` group by EVTYPE order by FATALITIES desc")
barplot(sqldf$FATALITIES)
dfFatalalies = sqldf("select EVTYPE, FATALITIES from `dataMod` group by EVTYPE order by FATALITIES desc")
library(ggplot)
library(ggplot2)
qplot(dfFatalalies$FATALITIES, data=dfFatalalies, geom=”histogram”)
qplot(dfFatalalies$FATALITIES, data=dfFatalalies, geom="histogram”)
qplot(dfFatalalies$FATALITIES, data=dfFatalalies, geom="histogram”)
qplot(dfFatalalies$FATALITIES, data=dfFatalalies, geom="histogram")
qplot(dfFatalalies$FATALITIES[1:10], data=dfFatalalies, geom="histogram")
qplot(dfFatalalies$FATALITIES, data=dfFatalalies[1:10,], geom="histogram")
qplot(dfFatalalies$FATALITIES, data=dfFatalalies[1:10,])
dfFatalalies=dfFatalalies[1:10,]
qplot(dfFatalalies$FATALITIES, data=dfFatalalies, geom = 'histogram');
dfFatalalies
plot(x = dfFatalalies$EVTYPE, dfFatalalies$FATALITIES, type="h", main="Top 10 Fatalities per disaster" , xlab="Disaster", ylab="Fatalities", col="blue", lwd=5)
plot(x = dfFatalalies$EVTYPE, y = dfFatalalies$FATALITIES, type="h", main="Top 10 Fatalities per disaster" , xlab="Disaster", ylab="Fatalities", col="blue", lwd=5)
plot(x = dfFatalalies$EVTYPE, y = dfFatalalies$FATALITIES, type="h", main="Top 10 Fatalities per disaster" , xlab="Disaster", ylab="Fatalities", col="blue", lwd=5, par(las=3))
barplot(dfFatalalies$FATALITIES, las = 3, names.arg = dfFatalalies$EVTYPE, main = "Events with Highest Fatalities",
ylab = "Number of fatalities", col = "light blue")
dfInjuries = sqldf("select EVTYPE, INJURIES from `dataMod` group by EVTYPE order by INJURIES desc")
dfInjuries=dfInjuries[1:10,]
par(mfrow = c(1, 2), mar = c(12, 4, 3, 2), mgp = c(3, 1, 0), cex = 0.8)
barplot(dfFatalalies$FATALITIES, las = 3, names.arg = dfFatalalies$EVTYPE, main = "Events with Highest Fatalities",
barplot(dfFatalalies$FATALITIES, las = 3, names.arg = dfFatalalies$EVTYPE, main = "Events with Highest Fatalities",
ylab = "Number of fatalities", col = "light blue")
barplot(dfInjuries$Injuries, las = 3, names.arg = dfInjuries$EVTYPE, main = "Events with Highest Injuries",
ylab = "Number of Injuries", col = "light blue")
dfInjuries
barplot(dfInjuries$INJURIES, las = 3, names.arg = dfInjuries$EVTYPE, main = "Events with Highest Injuries",
barplot(dfInjuries$INJURIES, las = 3, names.arg = dfInjuries$EVTYPE, main = "Events with Highest Injuries",
ylab = "Number of Injuries", col = "light blue")
cols <- c("red", "blue")[(x == max(x)) + 1]
barplot(dfFatalalies$FATALITIES, las = 3, names.arg = dfFatalalies$EVTYPE, main = "Events with Highest Fatalities",
ylab = "Number of fatalities", col = cols)
cols
cols <- c("red", "blue")[(x == max(x)) + 1]
cols
cols <- c("red", "blue")[(dfFatalalies$FATALITIES == max(dfFatalalies$FATALITIES)) + 1]
cols
cols <- c("blue", "red")[(dfFatalalies$FATALITIES == max(dfFatalalies$FATALITIES)) + 1]
cols
barplot(dfFatalalies$FATALITIES, las = 3, names.arg = dfFatalalies$EVTYPE, main = "Events with Highest Fatalities",
ylab = "Number of fatalities", col = cols)
colLabs <- c("red", "black")[(dfFatalalies$FATALITIES == max(dfFatalalies$FATALITIES)) + 1]
colLabs
barplot(dfFatalalies$FATALITIES, las = 3, names.arg = dfFatalalies$EVTYPE, main = "Events with Highest Fatalities",
ylab = "Number of fatalities", col = cols, col.lab = colLabs)
barplot(dfFatalalies$FATALITIES, las = 3, names.arg = dfFatalalies$EVTYPE, main = "Events with Highest Fatalities",
ylab = "Number of fatalities", col = cols,  col.lab="black", cex.lab=0.75)
source("proj2.R")
names(data)
source("proj2.R")
source("proj2.R")
par(mfrow = c(1, 2), mar = c(12, 4, 3, 2), mgp = c(3, 1, 0), cex = 0.8)
#Display the event with the highest fatalities in red and others in blue
cols <- c("blue", "red")[(dfFatalalies$FATALITIES == max(dfFatalalies$FATALITIES)) + 1]
barplot(dfFatalalies$FATALITIES, las = 3, names.arg = dfFatalalies$EVTYPE, main = "Events with Highest Fatalities",
ylab = "Number of fatalities", col = cols,  col.lab="black", cex.lab=0.75)
cols <- c("blue", "red")[(dfPropDmg$INJURIES == max(dfInjuries$INJURIES)) + 1]
barplot(dfInjuries$INJURIES, las = 3, names.arg = dfInjuries$EVTYPE, main = "Events with Highest Injuries",
ylab = "Number of Injuries", col = cols,  col.lab="black", cex.lab=0.75)
cols <- c("blue", "red")[(dfPropDmg$INJURIES == max(dfInjuries$INJURIES)) + 1]
cols
cols <- c("blue", "red")[(dfInjuries$INJURIES == max(dfInjuries$INJURIES)) + 1]
barplot(dfInjuries$INJURIES, las = 3, names.arg = dfInjuries$EVTYPE, main = "Events with Highest Injuries",
ylab = "Number of Injuries", col = cols,  col.lab="black", cex.lab=0.75)
par(mfrow = c(1, 2), mar = c(12, 4, 3, 2), mgp = c(3, 1, 0), cex = 0.8)
#Display the event with the highest fatalities in red and others in blue
cols <- c("blue", "red")[(dfFatalalies$FATALITIES == max(dfFatalalies$FATALITIES)) + 1]
barplot(dfFatalalies$FATALITIES, las = 3, names.arg = dfFatalalies$EVTYPE, main = "Events with Highest Fatalities",
ylab = "Number of fatalities", col = cols,  col.lab="black", cex.lab=0.75)
#Display the event with the highest Injuries in red and others in blue
cols <- c("blue", "red")[(dfInjuries$INJURIES == max(dfInjuries$INJURIES)) + 1]
barplot(dfInjuries$INJURIES, las = 3, names.arg = dfInjuries$EVTYPE, main = "Events with Highest Injuries",
ylab = "Number of Injuries", col = cols,  col.lab="black", cex.lab=0.75)
install.packages("rpubs")
dfFatalalies = sqldf("select EVTYPE, SUM(FATALITIES) as FATALITIES from `dataMod` group by EVTYPE order by FATALITIES desc")
dfFatalalies=dfFatalalies[1:10,]
dfFatalalies
dfInjuries = sqldf("select EVTYPE, SUM(INJURIES) as  INJURIES from `dataMod` group by EVTYPE order by INJURIES desc")
#select top 10 rows for analysis
dfInjuries=dfInjuries[1:10,]
#Plot Fatalities and Injuries plot together
par(mfrow = c(1, 2), mar = c(12, 4, 3, 2), mgp = c(3, 1, 0), cex = 0.8)
#Display the event with the highest fatalities in red and others in blue
cols <- c("blue", "red")[(dfFatalalies$FATALITIES == max(dfFatalalies$FATALITIES)) + 1]
barplot(dfFatalalies$FATALITIES, las = 3, names.arg = dfFatalalies$EVTYPE, main = "Events with Highest Fatalities",
ylab = "Number of fatalities", col = cols,  col.lab="black", cex.lab=0.75)
#Display the event with the highest Injuries in red and others in blue
cols <- c("blue", "red")[(dfInjuries$INJURIES == max(dfInjuries$INJURIES)) + 1]
barplot(dfInjuries$INJURIES, las = 3, names.arg = dfInjuries$EVTYPE, main = "Events with Highest Injuries",
ylab = "Number of Injuries", col = cols,  col.lab="black", cex.lab=0.75)
#group records by EVTYPE and order by PROPDMG - Property Damage
dfPropDmg = sqldf("select EVTYPE, SUM(PROPDMG) as PROPDMG from `dataMod` group by EVTYPE order by PROPDMG desc")
#select top 10 rows for analysis
dfPropDmg=dfPropDmg[1:10,]
#group records by EVTYPE and order by CROPDMG - Crop Damage
dfCropDmg = sqldf("select EVTYPE, SUM(CROPDMG) as CROPDMG from `dataMod` group by EVTYPE order by CROPDMG desc")
#select top 10 rows for analysis
dfCropDmg=dfCropDmg[1:10,]
#Plot Property damage and Crop damage plots together
par(mfrow = c(1, 2), mar = c(12, 4, 3, 2), mgp = c(3, 1, 0), cex = 0.8)
cols <- c("blue", "red")[(dfPropDmg$PROPDMG == max(dfPropDmg$PROPDMG)) + 1]
barplot(dfPropDmg$PROPDMG, las = 3, names.arg = dfPropDmg$EVTYPE, main = "Events with Highest Property Damage",
ylab = "Number of fatalities", col = cols,  col.lab="black", cex.lab=0.75)
cols <- c("blue", "red")[(dfCropDmg$CROPDMG == max(dfCropDmg$CROPDMG)) + 1]
barplot(dfCropDmg$CROPDMG, las = 3, names.arg = dfCropDmg$EVTYPE, main = "Events with Highest Crom Damage",
ylab = "Number of Injuries", col = cols,  col.lab="black", cex.lab=0.75)
dfPropDmg = sqldf("select EVTYPE, SUM(PROPDMG)/1,000,000,000 as PROPDMG from `dataMod` group by EVTYPE order by PROPDMG desc")
dfPropDmg=dfPropDmg[1:10,]
dfPropDmg
dfPropDmg = transform(dfPropDmg, PROPDMG = PROPDMG / 1,000,000,000)
dfPropDmg
dfPropDmg = sqldf("select EVTYPE, SUM(PROPDMG) as PROPDMG from `dataMod` group by EVTYPE order by PROPDMG desc")
dfPropDmg=dfPropDmg[1:10,]
dfPropDmg = transform(dfPropDmg, PROPDMG = PROPDMG / 1000000000)
dfPropDmg
dfPropDmg = sqldf("select EVTYPE, SUM(PROPDMG) as PROPDMG from `dataMod` group by EVTYPE order by PROPDMG desc")
dfPropDmg=dfPropDmg[1:10,]
dfPropDmg
dfPropDmg = transform(dfPropDmg, PROPDMG = PROPDMG / 1000000)
dfPropDmg
dfCropDmg
View(data)
dataMod <- data[,"EVTYPE","FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP"]
dataMod <- data[, c("EVTYPE","FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")]
propexp < unique(dataMod$PROPDMGEXP)
propexp <- unique(dataMod$PROPDMGEXP)
propexp
unique(dataMod$PROPDMGEXP)
str(dataMod)
as.numeric(levels(PROPDMGEXP))[PROPDMGEXP]
as.numeric(levels(dataMod$PROPDMGEXP))[dataMod$PROPDMGEXP]
dataMod <- data[, c("EVTYPE","FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")]
as.numeric(as.character(dataMod$PROPDMGEXP))
dataMod <- data[, c("EVTYPE","FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")]
unique(dataMod$PROPDMGEXP)
dataMod$PROPEXP[dataMod$PROPDMGEXP == "+"] <- 0
dataMod$PROPEXP[dataMod$PROPDMGEXP == "+"] <- 0
dataMod$PROPEXP[dataMod$PROPDMGEXP == "-"] <- 0
dataMod$PROPEXP[dataMod$PROPDMGEXP == "?"] <- 0
# valid numeral indicators 1 2 3 4 5 6 7 8
dataMod$PROPEXP[dataMod$PROPDMGEXP == "1"] <- 10
dataMod$PROPEXP[dataMod$PROPDMGEXP == "2"] <- 100
dataMod$PROPEXP[dataMod$PROPDMGEXP == "3"] <- 1000
dataMod$PROPEXP[dataMod$PROPDMGEXP == "4"] <- 10000
dataMod$PROPEXP[dataMod$PROPDMGEXP == "5"] <- 100000
dataMod$PROPEXP[dataMod$PROPDMGEXP == "6"] <- 1000000
dataMod$PROPEXP[dataMod$PROPDMGEXP == "7"] <- 10000000
dataMod$PROPEXP[dataMod$PROPDMGEXP == "8"] <- 100000000
#valid alpha indicators B h H K m M
dataMod$PROPEXP[dataMod$PROPDMGEXP == "B"] <- 1e+09
dataMod$PROPEXP[dataMod$PROPDMGEXP == "h"] <- 100
dataMod$PROPEXP[dataMod$PROPDMGEXP == "H"] <- 100
dataMod$PROPEXP[dataMod$PROPDMGEXP == "K"] <- 1000
dataMod$PROPEXP[dataMod$PROPDMGEXP == "m"] <- 1e+06
dataMod$PROPEXP[dataMod$PROPDMGEXP == "M"] <- 1e+06
# Updating  PROPDMG column with actual values
dataMod$PROPDMG <- dataMod$PROPDMG * dataMod$PROPDMGEXP
dataMod$PROPDMG <- dataMod$PROPDMG * dataMod$PROPEXP
unique(dataMod$CROPDMGEXP)
# invalid indicators ?
dataMod$CROPEXP[dataMod$CROPDMGEXP == "?"] <- 0
# valid numeral indicators 0 2
dataMod$CROPEXP[dataMod$CROPDMGEXP == "0"] <- 1
dataMod$CROPEXP[dataMod$CROPDMGEXP == "2"] <- 100
#valid alpha indicators k K m M
dataMod$CROPEXP[dataMod$CROPDMGEXP == "k"] <- 1000
dataMod$CROPEXP[dataMod$CROPDMGEXP == "K"] <- 1000
dataMod$CROPEXP[dataMod$CROPDMGEXP == "m"] <- 1e+06
dataMod$CROPEXP[dataMod$CROPDMGEXP == "M"] <- 1e+06
dataMod$CROPDMG <- dataMod$CROPDMG * dataMod$CROPEXP
#group records by EVTYPE and order by PROPDMG - Property Damage
dfPropDmg = sqldf("select EVTYPE, SUM(PROPDMG) as PROPDMG from `dataMod` group by EVTYPE order by PROPDMG desc")
#select top 10 rows for analysis
dfPropDmg=dfPropDmg[1:10,]
dfPropDmg = transform(dfPropDmg, PROPDMG = PROPDMG / 1000000)
#group records by EVTYPE and order by CROPDMG - Crop Damage
dfCropDmg = sqldf("select EVTYPE, SUM(CROPDMG) as CROPDMG from `dataMod` group by EVTYPE order by CROPDMG desc")
#select top 10 rows for analysis
dfCropDmg=dfCropDmg[1:10,]
dfCropDmg = transform(dfCropDmg, CROPDMG = CROPDMG / 1000000)
dfCropDmg
dfPropDmg
dataMod <- data[, c("EVTYPE","FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")]
source("proj2.R")
data <- read.csv("repdata-data-StormData.csv")
#Make a copy of dataframe for analysis and select the relevant columns
dataMod <- data[, c("EVTYPE","FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")]
#Find exponential indicators for Property damange
unique(dataMod$PROPDMGEXP)
# Convert exponential indicators to actual values and store them in new PROPEXP column
# invalid indicators - ? +
dataMod$PROPEXP[dataMod$PROPDMGEXP == "+"] <- 0
dataMod$PROPEXP[dataMod$PROPDMGEXP == "-"] <- 0
dataMod$PROPEXP[dataMod$PROPDMGEXP == "?"] <- 0
# valid numeral indicators 0 1 2 3 4 5 6 7 8
dataMod$PROPEXP[dataMod$PROPDMGEXP == "0"] <- 1
dataMod$PROPEXP[dataMod$PROPDMGEXP == "1"] <- 10
dataMod$PROPEXP[dataMod$PROPDMGEXP == "2"] <- 100
dataMod$PROPEXP[dataMod$PROPDMGEXP == "3"] <- 1000
dataMod$PROPEXP[dataMod$PROPDMGEXP == "4"] <- 10000
dataMod$PROPEXP[dataMod$PROPDMGEXP == "5"] <- 100000
dataMod$PROPEXP[dataMod$PROPDMGEXP == "6"] <- 1000000
dataMod$PROPEXP[dataMod$PROPDMGEXP == "7"] <- 10000000
dataMod$PROPEXP[dataMod$PROPDMGEXP == "8"] <- 100000000
#valid alpha indicators B h H K m M
dataMod$PROPEXP[dataMod$PROPDMGEXP == "B"] <- 1e+09
dataMod$PROPEXP[dataMod$PROPDMGEXP == "h"] <- 100
dataMod$PROPEXP[dataMod$PROPDMGEXP == "H"] <- 100
dataMod$PROPEXP[dataMod$PROPDMGEXP == "K"] <- 1000
dataMod$PROPEXP[dataMod$PROPDMGEXP == "m"] <- 1e+06
dataMod$PROPEXP[dataMod$PROPDMGEXP == "M"] <- 1e+06
# Updating  PROPDMG column with actual values
dataMod$PROPDMG <- dataMod$PROPDMG * dataMod$PROPEXP
#Find exponential indicators for Crop damange
unique(dataMod$CROPDMGEXP)
# invalid indicators ?
dataMod$CROPEXP[dataMod$CROPDMGEXP == "?"] <- 0
# valid numeral indicators 0 2
dataMod$CROPEXP[dataMod$CROPDMGEXP == "0"] <- 1
dataMod$CROPEXP[dataMod$CROPDMGEXP == "2"] <- 100
#valid alpha indicators k K m M
dataMod$CROPEXP[dataMod$CROPDMGEXP == "k"] <- 1000
dataMod$CROPEXP[dataMod$CROPDMGEXP == "K"] <- 1000
dataMod$CROPEXP[dataMod$CROPDMGEXP == "m"] <- 1e+06
dataMod$CROPEXP[dataMod$CROPDMGEXP == "M"] <- 1e+06
# Updating  CROPDMG column with actual values
dataMod$CROPDMG <- dataMod$CROPDMG * dataMod$CROPEXP
#load SQLDF package
library(sqldf)
#group records by EVTYPE and order by FATALITIE
dfFatalalies = sqldf("select EVTYPE, SUM(FATALITIES) as FATALITIES from `dataMod` group by EVTYPE order by FATALITIES desc")
#select top 10 rows for analysis
dfFatalalies=dfFatalalies[1:10,]
#group records by EVTYPE and order by INJURIES
dfInjuries = sqldf("select EVTYPE, SUM(INJURIES) as  INJURIES from `dataMod` group by EVTYPE order by INJURIES desc")
#select top 10 rows for analysis
dfInjuries=dfInjuries[1:10,]
#group records by EVTYPE and order by PROPDMG - Property Damage
dfPropDmg = sqldf("select EVTYPE, SUM(PROPDMG) as PROPDMG from `dataMod` group by EVTYPE order by PROPDMG desc")
#select top 10 rows for analysis
dfPropDmg=dfPropDmg[1:10,]
dfPropDmg = transform(dfPropDmg, PROPDMG = PROPDMG / 1000000000)
#group records by EVTYPE and order by CROPDMG - Crop Damage
dfCropDmg = sqldf("select EVTYPE, SUM(CROPDMG) as CROPDMG from `dataMod` group by EVTYPE order by CROPDMG desc")
#select top 10 rows for analysis
dfCropDmg=dfCropDmg[1:10,]
dfCropDmg = transform(dfCropDmg, CROPDMG = CROPDMG / 1000000000)
#Plot Fatalities and Injuries plot together
par(mfrow = c(1, 2), mar = c(12, 4, 3, 2), mgp = c(3, 1, 0), cex = 0.8)
#Display the event with the highest fatalities in red and others in blue
cols <- c("blue", "red")[(dfFatalalies$FATALITIES == max(dfFatalalies$FATALITIES)) + 1]
barplot(dfFatalalies$FATALITIES, las = 3, names.arg = dfFatalalies$EVTYPE, main = "Events with Highest Fatalities",
ylab = "Number of fatalities", col = cols,  col.lab="black", cex.lab=0.75)
#Display the event with the highest Injuries in red and others in blue
cols <- c("blue", "red")[(dfInjuries$INJURIES == max(dfInjuries$INJURIES)) + 1]
barplot(dfInjuries$INJURIES, las = 3, names.arg = dfInjuries$EVTYPE, main = "Events with Highest Injuries",
ylab = "Number of Injuries", col = cols,  col.lab="black", cex.lab=0.75)
#Plot Property damage and Crop damage plots together
par(mfrow = c(1, 2), mar = c(12, 4, 3, 2), mgp = c(3, 1, 0), cex = 0.8)
cols <- c("blue", "red")[(dfPropDmg$PROPDMG == max(dfPropDmg$PROPDMG)) + 1]
barplot(dfPropDmg$PROPDMG, las = 3, names.arg = dfPropDmg$EVTYPE, main = "Events with Highest Property Damage",
ylab = "Damage in billions $", col = cols,  col.lab="black", cex.lab=0.75)
cols <- c("blue", "red")[(dfCropDmg$CROPDMG == max(dfCropDmg$CROPDMG)) + 1]
barplot(dfCropDmg$CROPDMG, las = 3, names.arg = dfCropDmg$EVTYPE, main = "Events with Highest Crom Damage",
ylab = "Damage in billions $", col = cols,  col.lab="black", cex.lab=0.75)
